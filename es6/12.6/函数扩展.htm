<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <script>
        function f(a, b = 11) { //原生的
            console.log(a + b);
        }
        f(1);

        // 参数默认值与解构赋值结合
        function f({
            name,
            age
        }) {
            console.log(name, age);
        }
        f({
            name: "lal",
            age: 10
        });

        //函数名.length --> 获取所有没被设置默认值的参数个数，但是当第一个形参被设置默认值的话，那么无论后面的形参值是什么得到的结果就是0
        function f1(a, b) {
            console.log(a, b);
        }
        f1(1, 2);
        console.log(f1.length); //-->2

        function f2(a = 1, b) { //因此，一般情况下有默认值的参数都放在形参的最后
            console.log(a, b);
        }
        console.log(f2.length); //-->0

        /*
            use strict 开启严格模式（在函数的内部和外部都可以开启）
                变量必须显示声明
                禁止this关键字指向全局对象，构造函数必须得new
                函数不能有重名的参数
                禁止使用with语句
                arguments.callee()
        */
        "use strict"
        let a = 12;

        function fun() {
            console.log(this); //undefined
        }
        fun();

        //arguments.callee()
        function ff(num) {
            if (num == 1) {
                return 1;
            } else {
                return num * ff(num - 1);
                //开启严格模式的时候不能使用65行的语句
                // return num * arguments.callee(num - 1);
            }
        }
        console.log(ff(10));


        //箭头函数 -->不需要有function的声明
        /**
           箭头函数的注意事项：
                函数体内的this指向的是定义时候的对象
                不可以的用来定义构造函数
                不可以使用arguments对象
        
        */
        // let foo = (a, b) => {
        //     return a + b;
        // }
        //如果函数只有一条语句的话，可以这样写
        let foo = (a, b) => a + b;
        console.log(foo(1, 2));

        let school = '理工';
        let obj = {
            school: "黑大",
            showSchool: function () {
                console.log(this, school);
                // setTimeout(function () {
                //     console.log(this.school);
                // }.call(this), 1000);

                //箭头函数的this，指向的是定义时的this
                setTimeout(() => function () {
                    console.log(this.school);
                }, 1000);
            }
        }
        obj.showSchool();

        
    </script>
</body>

</html>